How to add additional third party module without effecting running nginx service
================================================================================
a) Install pre-requisites:
[root] $ yum groupinstall 'Development tools'
[root] $ yum install -y \
 geoip-devel \
 gperftools-devel \
 libcurl-devel \
 libxml2-devel \
 libxslt-devel \
 libgd-devel \
 lmdb-devel \
 openssl-devel \
 pcre-devel \
 perl-ExtUtils-Embed \
 yajl-devel \
 zlib-devel


b) Clone ModSecurity, compile, and install (this will take a long time):

[root] $ cd /opt
[root] $ git clone --depth 1 -b v3/master https://github.com/SpiderLabs/ModSecurity
[root] $ cd ModSecurity
[root] $ git submodule init
[root] $ git submodule update
[root] $ ./build.sh
[root] $ ./configure
[root] $ make
[root] $ make install

c) Download ModSecurity-nginx
[root] $ cd /opt
[root] $ git clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git

d) Download and unpack NGINX source:
[root] $ nginx -v
nginx version: nginx/1.12.2
[root] $ wget http://nginx.org/download/nginx-1.12.2.tar.gz
[root] $ tar zxvf nginx-1.12.2.tar.gz

e) Configure and build dynamic module:
[root] $ cd nginx-1.12.2
[root] $ ./configure --with-compat --add-dynamic-module=../ModSecurity-nginx
[root] $ make modules
[root] $ cp objs/ngx_http_modsecurity_module.so /etc/nginx/modules/

[root] $ cp /opt/ModSecurity/unicode.mapping /etc/nginx/modsecurity/unicode.mapping


f) Add modsecurity module in /etc/nginx/conf.d/default.conf
# Load ModSecurity dynamic module
load_module /etc/nginx/modules/ngx_http_modsecurity_module.so;

g) Enabling ModSecurity with Recommended Rules
[root] $ mkdir /etc/nginx/modsecurity
[root] $ cp /opt/ModSecurity/modsecurity.conf-recommended /etc/nginx/modsecurity/modsecurity.conf
[root] $ cp /opt/ModSecurity/unicode.mapping /etc/nginx/modsecurity/unicode.mapping

h) SecAuditLog /var/log/nginx/modsec_audit.log

i)
server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl default_server;
    server_name _;
    root /usr/share/nginx/html;

    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity/modsecurity.conf;

    ssl_certificate /etc/nginx/ssl/public.pem;
    ssl_certificate_key /etc/nginx/ssl/private.key;

    rewrite ^(/.*)\.html(\?.*)?$ $1$2 redirect;
    rewrite ^/(.*)/$ /$1 redirect;

    location / {
        try_files $uri/index.html $uri.html $uri/ $uri =404;
    }

    location = /admin {
        auth_basic "Login Required";
        auth_basic_user_file /etc/nginx/.htpasswd;
        try_files $uri/index.html $uri.html $uri/ $uri =404;
    }

    error_page 404 /404.html;
    error_page 500 501 502 503 504 /50x.html;
}

j)Finally, let's make sure that our configuration is valid using nginx -t and then reload the service.
[root] $ nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
[root] $ systemctl reload nginx


